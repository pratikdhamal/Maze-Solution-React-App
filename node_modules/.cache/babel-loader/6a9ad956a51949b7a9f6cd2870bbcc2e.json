{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\nexport function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  let nextNodesStack = [startNode];\n\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.shift();\n    if (currentNode === finishNode) return visitedNodesInOrder;\n\n    if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n      const {\n        col,\n        row\n      } = currentNode;\n      let nextNode;\n\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n    }\n  }\n\n  return visitedNodesInOrder;\n}","map":{"version":3,"names":["bfs","grid","startNode","finishNode","visitedNodesInOrder","nextNodesStack","length","currentNode","shift","isWall","isStart","isVisited","push","col","row","nextNode","previousNode"],"sources":["C:/Users/91842/Desktop/TY13 DAA Maze Solution React App/src/Algorithms/bfs.js"],"sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    let nextNodesStack = [startNode];\r\n    while (nextNodesStack.length) {\r\n      const currentNode = nextNodesStack.shift();\r\n      if (currentNode === finishNode) return visitedNodesInOrder;\r\n  \r\n      if (\r\n        !currentNode.isWall &&\r\n        (currentNode.isStart || !currentNode.isVisited)\r\n      ) {\r\n        currentNode.isVisited = true;\r\n        visitedNodesInOrder.push(currentNode);\r\n        const {col, row} = currentNode;\r\n        let nextNode;\r\n        if (row > 0) {\r\n          nextNode = grid[row - 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (row < grid.length - 1) {\r\n          nextNode = grid[row + 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col > 0) {\r\n          nextNode = grid[row][col - 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col < grid[0].length - 1) {\r\n          nextNode = grid[row][col + 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return visitedNodesInOrder;\r\n  }\r\n  "],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0C;EAC7C,MAAMC,mBAAmB,GAAG,EAA5B;EACA,IAAIC,cAAc,GAAG,CAACH,SAAD,CAArB;;EACA,OAAOG,cAAc,CAACC,MAAtB,EAA8B;IAC5B,MAAMC,WAAW,GAAGF,cAAc,CAACG,KAAf,EAApB;IACA,IAAID,WAAW,KAAKJ,UAApB,EAAgC,OAAOC,mBAAP;;IAEhC,IACE,CAACG,WAAW,CAACE,MAAb,KACCF,WAAW,CAACG,OAAZ,IAAuB,CAACH,WAAW,CAACI,SADrC,CADF,EAGE;MACAJ,WAAW,CAACI,SAAZ,GAAwB,IAAxB;MACAP,mBAAmB,CAACQ,IAApB,CAAyBL,WAAzB;MACA,MAAM;QAACM,GAAD;QAAMC;MAAN,IAAaP,WAAnB;MACA,IAAIQ,QAAJ;;MACA,IAAID,GAAG,GAAG,CAAV,EAAa;QACXC,QAAQ,GAAGd,IAAI,CAACa,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAX;;QACA,IAAI,CAACE,QAAQ,CAACJ,SAAd,EAAyB;UACvBI,QAAQ,CAACC,YAAT,GAAwBT,WAAxB;UACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB;QACD;MACF;;MACD,IAAID,GAAG,GAAGb,IAAI,CAACK,MAAL,GAAc,CAAxB,EAA2B;QACzBS,QAAQ,GAAGd,IAAI,CAACa,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAX;;QACA,IAAI,CAACE,QAAQ,CAACJ,SAAd,EAAyB;UACvBI,QAAQ,CAACC,YAAT,GAAwBT,WAAxB;UACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB;QACD;MACF;;MACD,IAAIF,GAAG,GAAG,CAAV,EAAa;QACXE,QAAQ,GAAGd,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAX;;QACA,IAAI,CAACE,QAAQ,CAACJ,SAAd,EAAyB;UACvBI,QAAQ,CAACC,YAAT,GAAwBT,WAAxB;UACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB;QACD;MACF;;MACD,IAAIF,GAAG,GAAGZ,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAR,GAAiB,CAA3B,EAA8B;QAC5BS,QAAQ,GAAGd,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAX;;QACA,IAAI,CAACE,QAAQ,CAACJ,SAAd,EAAyB;UACvBI,QAAQ,CAACC,YAAT,GAAwBT,WAAxB;UACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB;QACD;MACF;IACF;EACF;;EACD,OAAOX,mBAAP;AACD"},"metadata":{},"sourceType":"module"}